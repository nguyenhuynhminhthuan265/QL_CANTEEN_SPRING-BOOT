package com.myclass.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.myclass.dto.CustomUserDetails;
import com.myclass.entity.Bill;
import com.myclass.entity.DetailBill;
import com.myclass.entity.Employee;
import com.myclass.entity.Product;
import com.myclass.repository.BillRepository;
import com.myclass.repository.DetailBillRepository;
import com.myclass.repository.EmployeeRepository;
import com.myclass.repository.ProductRepository;
import com.myclass.repository.UserRepository;

@Controller
@RequestMapping("admin/product")
public class ChooseController {
	
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private EmployeeRepository employeeRepository;

	@Autowired
	private BillRepository billRepository;

	@Autowired
	private DetailBillRepository detailBillRepository;

	@Autowired
	private ProductRepository productRepository;

	private List<Product> products = new ArrayList<Product>();
	private int userId = 0;

	@GetMapping("choose/{id}")
	public String index(@PathVariable("id") int id, Model model) {
		System.out.println("ID PRODUCT: " + id);
		Optional<Product> product = productRepository.findById(id);
		int quantity = product.get().getQuantity() - 1;
		// product.get().setQuantity(quantity);
		// productRepository.save(new Product(id, product.get().getName(),
		// product.get().getQuantity(), product.get().getPrice(),
		// product.get().getDateProduct(), product.get().isBeverage(),
		// product.get().getStatusId(), product.get().isDelete()));
		System.out.println(product.toString());
		products.add(product.get());
		System.out.println(products.size());
		
		
		return "redirect:/admin/product";
	}

	@GetMapping("create-bill")
	public String createBill(Model model) {
		model.addAttribute("listProduct", products);
		model.addAttribute("users", userRepository.findAll());
		return "bill/create-bill";

	}
	
	@GetMapping("create-bill/{userId}")
	public String getUserId(Model model, @PathVariable("userId") int userId) {
		this.userId=userId;
		System.out.println("User id of bill: " + this.userId);
		return "bill/create-bill";

	}
	@GetMapping("submit-create-bill")
	public String submitCreateBill(Model model) {
		float price = 0;
//		String userId =req.getParameter("userId");
//		System.out.println("Id User of bill: " + userId);
		for (Product product : products) {
			price += product.getPrice();
		}
		CustomUserDetails employee = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication()
				.getPrincipal();
		System.out.println("name log in: " + employee.getUsername());
		Employee employee1 = employeeRepository.findByEmail(employee.getUsername());

		Bill bill = new Bill(new Date(), 1, employee1.getId(), price);

		billRepository.save(bill);
		
		for (Product product2 : products) {
			Optional<Product> product3=productRepository.findById(product2.getId());
			DetailBill detailBill = new DetailBill(bill, product3.get(), 1, product3.get().getPrice());
			detailBillRepository.save(detailBill);
		}
		
		return "redirect:/admin/bill";
	}
	@GetMapping("create-bill/delete/{stt}")
	public String delete(@PathVariable("stt") int stt) {
		// Xóa Bill theo id
		System.out.println("STT DELETE CREATE BILL: " + (stt + 1));

		products.remove(stt);
		for (Product product1 : products) {
			System.out.println(product1.getId());
		}
		// Chuyển hướng về trang danh sách
		return "redirect:/admin/product/create-bill";
	}

	
}
